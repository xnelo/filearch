/*
 * This file is generated by jOOQ.
 */
package com.xnelo.filearch.jooq.tables;

import com.xnelo.filearch.jooq.Filearch;
import com.xnelo.filearch.jooq.tables.records.TestTableRecord;
import java.util.Collection;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class TestTable extends TableImpl<TestTableRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>FILEARCH.test_table</code> */
  public static final TestTable TEST_TABLE = new TestTable();

  /** The class holding records for this type */
  @Override
  public Class<TestTableRecord> getRecordType() {
    return TestTableRecord.class;
  }

  /** The column <code>FILEARCH.test_table.id</code>. */
  public final TableField<TestTableRecord, Integer> ID =
      createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

  /** The column <code>FILEARCH.test_table.name</code>. */
  public final TableField<TestTableRecord, String> NAME =
      createField(DSL.name("name"), SQLDataType.VARCHAR(20), this, "");

  private TestTable(Name alias, Table<TestTableRecord> aliased) {
    this(alias, aliased, (Field<?>[]) null, null);
  }

  private TestTable(
      Name alias, Table<TestTableRecord> aliased, Field<?>[] parameters, Condition where) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
  }

  /** Create an aliased <code>FILEARCH.test_table</code> table reference */
  public TestTable(String alias) {
    this(DSL.name(alias), TEST_TABLE);
  }

  /** Create an aliased <code>FILEARCH.test_table</code> table reference */
  public TestTable(Name alias) {
    this(alias, TEST_TABLE);
  }

  /** Create a <code>FILEARCH.test_table</code> table reference */
  public TestTable() {
    this(DSL.name("test_table"), null);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Filearch.FILEARCH;
  }

  @Override
  public TestTable as(String alias) {
    return new TestTable(DSL.name(alias), this);
  }

  @Override
  public TestTable as(Name alias) {
    return new TestTable(alias, this);
  }

  @Override
  public TestTable as(Table<?> alias) {
    return new TestTable(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public TestTable rename(String name) {
    return new TestTable(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public TestTable rename(Name name) {
    return new TestTable(name, null);
  }

  /** Rename this table */
  @Override
  public TestTable rename(Table<?> name) {
    return new TestTable(name.getQualifiedName(), null);
  }

  /** Create an inline derived table from this table */
  @Override
  public TestTable where(Condition condition) {
    return new TestTable(getQualifiedName(), aliased() ? this : null, null, condition);
  }

  /** Create an inline derived table from this table */
  @Override
  public TestTable where(Collection<? extends Condition> conditions) {
    return where(DSL.and(conditions));
  }

  /** Create an inline derived table from this table */
  @Override
  public TestTable where(Condition... conditions) {
    return where(DSL.and(conditions));
  }

  /** Create an inline derived table from this table */
  @Override
  public TestTable where(Field<Boolean> condition) {
    return where(DSL.condition(condition));
  }

  /** Create an inline derived table from this table */
  @Override
  @PlainSQL
  public TestTable where(SQL condition) {
    return where(DSL.condition(condition));
  }

  /** Create an inline derived table from this table */
  @Override
  @PlainSQL
  public TestTable where(@Stringly.SQL String condition) {
    return where(DSL.condition(condition));
  }

  /** Create an inline derived table from this table */
  @Override
  @PlainSQL
  public TestTable where(@Stringly.SQL String condition, Object... binds) {
    return where(DSL.condition(condition, binds));
  }

  /** Create an inline derived table from this table */
  @Override
  @PlainSQL
  public TestTable where(@Stringly.SQL String condition, QueryPart... parts) {
    return where(DSL.condition(condition, parts));
  }

  /** Create an inline derived table from this table */
  @Override
  public TestTable whereExists(Select<?> select) {
    return where(DSL.exists(select));
  }

  /** Create an inline derived table from this table */
  @Override
  public TestTable whereNotExists(Select<?> select) {
    return where(DSL.notExists(select));
  }
}
